{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./scripts/__utils.ts","webpack:///external \"mongoose\"","webpack:///./core.ts","webpack:///./scripts/bot.ts","webpack:///./models/constants.ts","webpack:///external \"chalk\"","webpack:///external \"minimist\"","webpack:///external \"node-telegram-bot-api\"","webpack:///external \"http\"","webpack:///external \"express\"","webpack:///./scripts/commands.ts","webpack:///./models/schemas.ts","webpack:///./scripts/booru.ts","webpack:///external \"danbooru\"","webpack:///external \"https\"","webpack:///external \"fs\""],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","chalk","minimist","enableLogs","error","title","bgRed","black","message","args","shift","Error","stackLogs","stack","split","console","red","trim","warn","this","bgYellow","yellow","info","bgCyan","cyan","DanConsole","flattenArrayOfObjects","array","reduce","acc","val","Array","isArray","concat","temp","valKey","push","parseCommand","string","command","base","parameters","DanUtils","allowedParams","set","parameter","lastSetting","getAll","parKey","keys","log","process","env","DAN_SETTING","JSON","stringify","parse","DanMemory","require","NTBA_FIX_319","bot","dansole","http","app","express","server","createServer","request","response","headers","host","listen","PORT","post","req","res","chat","id","sendMessage","setCommand","callback","isArguments","regExp","RegExp","onText","BOT_TOKEN","polling","DATABASE_URL","DB_USERNAME","DB_PASSWORD","DB_SHARDS","DB_NAME","mongoose","connect","useUnifiedTopology","useNewUrlParser","db","connection","on","once","EXCLUDED_TAGS","TRANSLATED_TAGS_RU","LIMIT_FOR_TAGS","danUtils","danMemory","getPostsInfo","CHANNEL_ID","c_start","msg","chatId","getUpdates","then","reply_markup","resize_keyboard","one_time_keyboard","keyboard","text","c_hello","e","c_info","botChatId","join","settings","length","c_link","posts","rando","Math","floor","random","file_url","c_pic","sendPhoto","c_post","refreshPosts","postPreferences","_posts","sort","prevPost","up_score","sortedPosts","selectedPostIndex","postsRefreshedCounter","getCollectionName","tag_string_artist","isPostInDB","_selectedPost","collectionName","selectedPost","model","MPost","find","md5","substr","map","_doc","selectPost","isNewPost","modelDocument","url","added_at","Date","toUTCString","tags","tag_string","artists","save","err","large_file_url","caption","file_ext","preferences","c_set","c_help","MongoSavedPost","Schema","String","Danbooru","https","fs","booru","saveFile","files","readdirSync","filesCount","forEach","fileName","filter","file","pipe","createWriteStream","dir","params","postParams","paramsArray","paramsKey","limit","success","getPostsFileStream"],"mappings":"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","file":"dan.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","const chalk = require('chalk');\r\nconst minimist = require('minimist');\r\n\r\nexport class DanConsole {\r\n    public constructor(enableLogs: boolean = false) {\r\n        this.enableLogs = enableLogs;\r\n    }\r\n\r\n    private enableLogs: boolean;\r\n\r\n    public error = function (...args: Array<string | Object>) {\r\n        const title = chalk.bgRed.black('[DAN] >> Error: ');\r\n        const message: any = args.shift();\r\n        const error = new Error(message);\r\n        const stackLogs = error.stack.split('\\n');\r\n        console.error(`\\n\\nLogs: ${error.stack}\\n\\n`)\r\n        console.error(`${title} ${chalk.red(stackLogs[2].trim())} ${error.message}\\n`);\r\n    };\r\n\r\n    public warn = function (...args: Array<string | Object>) {\r\n        if (this.enableLogs) {\r\n            const title = chalk.bgYellow.black('[DAN] >> Warning: ');\r\n            console.warn(title, chalk.yellow(...args));\r\n        }\r\n    };\r\n\r\n    public info = function (...args: Array<string | Object>) {\r\n        if (this.enableLogs) {\r\n            const title = chalk.bgCyan.black('[DAN] >> FYI: ');\r\n            console.info(title, chalk.cyan(...args));\r\n        }\r\n    };\r\n}\r\n\r\nexport class DanUtils {\r\n\r\n    /**\r\n     * Suppose you have Array of objects and you need Array with their values. This function does that\r\n\t *\r\n\t * @param {array} array - An array of any iterable objects to flatten\r\n\t * @returns {array} flattened array of values\r\n     * @example\r\n     *      flattenArrayOfObjects[{.}, {.}, {.}] => [...]\r\n     */\r\n\r\n    public flattenArrayOfObjects(array: Array<{[key:string]: any}>): Array<any> {\r\n        return array.reduce((acc, val) => {\r\n            if (Array.isArray(val)) {\r\n                return acc.concat(this.flattenArrayOfObjects(val));\r\n            } else if (typeof val === 'object') {\r\n                const temp = [];\r\n                for (let valKey in val) {\r\n                    if (typeof val[valKey] === 'object') {\r\n                        return acc.concat(this.flattenArrayOfObjects([val[valKey]]));\r\n                    }\r\n                    temp.push(`${valKey}: ${val[valKey]}`)\r\n                }\r\n                return acc.concat(temp)\r\n            } else {\r\n                return acc.concat(val)\r\n            }\r\n        }, []);\r\n    }\r\n\r\n\r\n    public parseCommand(string: string) {\r\n        const command = string.split(' ');\r\n        const base = command.shift();\r\n\r\n        return {\r\n            base,\r\n            parameters: minimist(command)\r\n        }\r\n    }\r\n}\r\n\r\nexport class DanMemory {\r\n    public allowedParams = ['rating', 'order', 'frequency'];\r\n\r\n    public set(parameter: {[key: string]: string}): void {\r\n        const lastSetting = this.getAll();\r\n        const parKey = Object.keys(parameter)[0];\r\n        console.log('Saving: ', parKey, parameter[parKey]);\r\n\r\n        process.env.DAN_SETTING = JSON.stringify({\r\n            ...lastSetting,\r\n            [parKey]: parameter[parKey]\r\n        });\r\n    }\r\n\r\n    public get(value: string): string {\r\n        return JSON.parse(process.env.DAN_SETTING)[value];\r\n    }\r\n\r\n    public getAll(): {[key: string]: string} {\r\n        console.log('Getting all: ', process.env.DAN_SETTING);\r\n        return process.env.DAN_SETTING? JSON.parse(process.env.DAN_SETTING) : {};\r\n    }\r\n}\r\n\r\n\r\n","module.exports = require(\"mongoose\");","// ENTRY POINT (start program from here)\r\n\r\nif (process.env.NODE_ENV !== 'production') {\r\n  // checking if running in production environment.\r\n  // NODE_ENV will be set by node automatically if so\r\n\r\n  // loading dotenv vars to process.env\r\n  require('dotenv').config();\r\n}\r\n\r\nprocess.env.NTBA_FIX_319 = '1';\r\n\r\nimport { DanConsole } from \"./scripts/__utils\";\r\nimport { Http2ServerResponse, Http2ServerRequest } from \"http2\";\r\nimport { ITelegramMessage } from \"./models/telegram\";\r\nconst {bot} = require('./scripts/bot');\r\nconst dansole = new DanConsole(true);\r\nconst http = require('http');\r\n\r\nvar express = require(\"express\");\r\nvar app = express();\r\n\r\n/**\r\n * Suppose you have Array of objects and you need Array with their values. This function does that\r\n *\r\n * @param {string} name - how command can be called\r\n * @param {Function} callback - function of command\r\n * @param {boolean} isArguments - if true command can be followed by argument\r\n * @example\r\n *      newCommand('do_thing --fast', onEvent, true)\r\n */\r\nfunction newCommand(name: string, callback: Function, isArguments: boolean = false): void {\r\n  const regExp = (!isArguments) ? new RegExp(`\\/${name}`) : new RegExp(`\\/${name} (.+)`);\r\n\r\n  bot.onText(regExp, callback);\r\n}\r\n\r\ndansole.info('Core initiated. Loading dependencies ...');\r\n\r\nconst server = http.createServer(function (request: Http2ServerRequest, response: Http2ServerResponse) {\r\n  console.log(`Connected to server ${request.headers.host}`);\r\n  // const message: ITelegramMessage = request.body.message;\r\n  // const chatId = (message) ? message.chat.id : 1000000;\r\n  // bot.sendMessage(chatId, `Connected to server ${request.url}`);\r\n\r\n}).listen(process.env.PORT || 5000);\r\n\r\napp.post(\"/start_bot\", function(req: any, res: Http2ServerResponse) {\r\n  const { message } = req.body;\r\n  const chatId = message.chat.id;\r\n  let reply = \"Welcome to telegram weather bot\";\r\n\r\n\r\n  bot.sendMessage(message.chat.id, reply);\r\n});\r\n\r\napp.listen(process.env.PORT || 5000, () => console.log(`Telegram bot is listening on port ${process.env.PORT || 5000}!`));\r\n\r\nmodule.exports = {\r\n  setCommand: newCommand,\r\n  server\r\n};\r\n\r\n// initiating commands\r\nrequire('./scripts/commands');\r\n","// [ BOT CONFIG ]\r\n\r\nconst TelegramBot = require('node-telegram-bot-api');\r\nconst token = process.env.BOT_TOKEN;\r\nconst bot = new TelegramBot(token, {polling: true});\r\n\r\n// [ DB CONFIG ]\r\n\r\nconst DATABASE_URL = `mongodb+srv://${process.env.DB_USERNAME}:${process.env.DB_PASSWORD}@${process.env.DB_SHARDS}/${process.env.DB_NAME}?retryWrites=true&w=majority`;\r\nconst mongoose = require('mongoose');\r\n// connecting DB to env variable\r\nmongoose.connect(DATABASE_URL, {useUnifiedTopology: true, useNewUrlParser: true}).catch((error: Error) => {\r\n  console.error(`[DAN] >> Error: failed to connect to Mongo DB! \\n`, error);\r\n});\r\n\r\n// accessing connection to DB\r\nconst db = mongoose.connection;\r\n\r\ndb.on('error', (error: Error) => console.error(`[DAN] >> Error: Mongo DB failed \\n`, error));\r\ndb.once('open', () => console.info('Connected to Mongoose DB!'));\r\n\r\nmodule.exports = {bot, db};\r\n\r\n\r\n","export const EXCLUDED_TAGS = [\r\n    'gay', 'gore', 'yaoi', 'male_masturbation', 'male_pubic_hair', 'multiple_boys', 'otoko_no_ko'\r\n];\r\n\r\nexport const TRANSLATED_TAGS_RU = {\r\n\r\n};\r\n\r\n// when tags such as {rating: 'safe'} is added to search, limit should be increased\r\nexport const LIMIT_FOR_TAGS = 100;\r\n","module.exports = require(\"chalk\");","module.exports = require(\"minimist\");","module.exports = require(\"node-telegram-bot-api\");","module.exports = require(\"http\");","module.exports = require(\"express\");","// set of all bot commands\r\n\r\n\r\nimport {IDanPost} from \"../models/danbooru\";\r\nimport {MPost} from \"../models/schemas\";\r\nimport {DanConsole, DanMemory, DanUtils} from \"./__utils\";\r\nimport {LIMIT_FOR_TAGS} from \"../models/constants\";\r\nimport { ITelegramMessage, ITelegramUpdateResponse } from \"../models/telegram\";\r\nimport { IMongoFindResponse } from \"../models/mongo\";\r\nimport { IncomingMessage } from \"http\";\r\n\r\nconst dansole = new DanConsole(true);\r\nconst danUtils = new DanUtils();\r\nconst danMemory = new DanMemory();\r\n\r\n\r\nconst mongoose = require('mongoose');\r\nconst {bot} = require('./bot');\r\nconst {getPostsInfo} = require('./booru');\r\nconst {setCommand} = require('../core');\r\n\r\nconst CHANNEL_ID = process.env.CHANNEL_ID;\r\n\r\n/**\r\n * shows keyboard\r\n * also this is INITIAL COMMAND (runs on start)\r\n */\r\nfunction c_start(msg: ITelegramMessage) {\r\n    const chatId = msg.chat.id;\r\n    bot.getUpdates().then(() => {\r\n        bot.sendMessage(chatId, 'Thank you for visiting our hub!', {\r\n            reply_markup: {\r\n                resize_keyboard: true,\r\n                one_time_keyboard: false,\r\n                keyboard: [\r\n                    [{text: '\\/help'}],\r\n                    [{text: '\\/info'}, {text: '\\/pic'}],\r\n                    [{text: '\\/post'}],\r\n                ],\r\n            },\r\n        });\r\n    })\r\n}\r\n\r\n/**\r\n * prints static message\r\n */\r\nfunction c_hello(msg: ITelegramMessage) {\r\n    const chatId = msg.chat.id;\r\n    bot.sendMessage(chatId, 'Hello there!').catch((e: IncomingMessage) => dansole.error(e));\r\n}\r\n\r\n/**\r\n * prints general information:\r\n *  botId\r\n */\r\nfunction c_info(msg: ITelegramMessage) {\r\n    const chatId = msg.chat.id;\r\n    bot.getUpdates().then((res: Array<ITelegramUpdateResponse>) => {\r\n        const botInfoObj = danUtils.flattenArrayOfObjects([\r\n            { botChatId: chatId},\r\n            res\r\n        ]);\r\n\r\n        let info = botInfoObj.join(`; \\n`);\r\n\r\n        const settings = danMemory.getAll();\r\n\r\n        if (Object.keys(settings).length) {\r\n            info = info.concat(`\\n\\nSettings: \\n${JSON.stringify(settings)}`)\r\n        }\r\n\r\n        dansole.info(info, settings);\r\n\r\n        bot.sendMessage(chatId, info).catch((e: IncomingMessage) => dansole.error(e))\r\n    });\r\n}\r\n\r\n/**\r\n * sends a random picture link\r\n */\r\nasync function c_link(msg: ITelegramMessage) {\r\n    const chatId = msg.chat.id;\r\n    bot.sendMessage(chatId, 'Getting you a link ...').catch((e: IncomingMessage) => dansole.error(e));\r\n    const posts: Array<IDanPost> = await getPostsInfo();\r\n    const rando = posts[Math.floor(Math.random()*posts.length)];\r\n    await bot.sendMessage(chatId, rando.file_url).catch((e: IncomingMessage) => dansole.error(e));\r\n}\r\n\r\n/**\r\n * sends a random picture\r\n */\r\nasync function c_pic(msg: ITelegramMessage) {\r\n    const chatId = msg.chat.id;\r\n    bot.sendMessage(chatId, 'Getting you a picture ...').catch((e: IncomingMessage) => dansole.error(e));\r\n    const posts: Array<IDanPost> = await getPostsInfo();\r\n    const rando = posts[Math.floor(Math.random()*posts.length)];\r\n    await bot.sendPhoto(msg.chat.id, rando.file_url).catch((e: IncomingMessage) => dansole.error(e))\r\n}\r\n\r\n/**\r\n * posts picture to channel\r\n */\r\nasync function c_post(msg: ITelegramMessage) {\r\n    const chatId = msg.chat.id;\r\n    let selectedPostIndex: number = 0;\r\n    let postsRefreshedCounter: number = 0;  // debug info (for report)\r\n    let selectedPost: IDanPost;\r\n    // let posts: Array<IDanPost> = [];\r\n    let sortedPosts: Array<IDanPost> = [];\r\n    const postPreferences = danMemory.getAll();\r\n\r\n    // let collectionName: string;\r\n    // let modelDocument;\r\n\r\n    function sortByScore(posts: Array<IDanPost>): Array<IDanPost> {\r\n        return posts.sort(((post, prevPost) => {\r\n            return prevPost.up_score - post.up_score\r\n        }))\r\n    }\r\n\r\n    // pulls a pack of 20 posts and sorts them\r\n    async function refreshPosts() {\r\n        // [1] getting pack of posts\r\n        const _posts = await getPostsInfo(postPreferences);\r\n        // [2] sorting by best (higher up score)\r\n        sortedPosts = await sortByScore(_posts);\r\n\r\n        selectedPostIndex = 0;\r\n        postsRefreshedCounter++;\r\n    }\r\n\r\n    const selectPost = (_posts: Array<IDanPost>): IDanPost => {\r\n        if (selectedPostIndex === _posts.length - 1) {\r\n            refreshPosts();\r\n        }\r\n\r\n        const _selectedPost = _posts[selectedPostIndex];\r\n        selectedPostIndex++;\r\n\r\n        return _selectedPost;\r\n    };\r\n\r\n    function getCollectionName(post: IDanPost): string {\r\n        if (post.tag_string_artist.length > 0) {\r\n            return post.tag_string_artist.split(' ')[0];\r\n        } else {\r\n            return 'other';\r\n        }\r\n    }\r\n\r\n    function isPostInDB(_selectedPost: IDanPost): Promise<boolean> {\r\n        // [3] checking if was posted before\r\n        const collectionName = getCollectionName(selectedPost);\r\n        const modelDocument = mongoose.model(collectionName, MPost);\r\n\r\n        return modelDocument.find({md5: _selectedPost.md5}).then((res: Array<IMongoFindResponse<IDanPost>>) => {\r\n            dansole.info(`Searching ${selectedPost.md5.substr(-4, 4)} in ${collectionName}`);\r\n            dansole.info(res.length, res.map(r => {\r\n                return (r._doc) ? r._doc.md5.substr(-4, 4) : 'not found!';\r\n            }));\r\n            return res.length > 0;\r\n        }, (e: IncomingMessage) => dansole.error(e));\r\n    }\r\n\r\n    await refreshPosts();\r\n    let isNewPost: boolean = false;\r\n\r\n    do {\r\n        selectedPost = selectPost(sortedPosts);\r\n        isNewPost = await isPostInDB(selectedPost);\r\n\r\n        if (postsRefreshedCounter > 3) {\r\n            bot.sendMessage(chatId, '`WARNING!` Maximum cycle count reached. You need to make search scope wider!').catch((e: IncomingMessage) => dansole.error(e));\r\n            return;\r\n        }\r\n    } while (isNewPost);\r\n\r\n    // [4] saving to DB\r\n    const collectionName = getCollectionName(selectedPost);\r\n    const modelDocument = mongoose.model(collectionName, MPost);\r\n    const dbPost = new modelDocument({\r\n        md5: selectedPost.md5,\r\n        url: selectedPost.file_url,\r\n        added_at: new Date().toUTCString(),\r\n        tags: selectedPost.tag_string,\r\n        artists: selectedPost.tag_string_artist\r\n    });\r\n\r\n    await dbPost.save(function (err: IncomingMessage) {\r\n        if (err) {\r\n            bot.sendMessage(chatId, '`WARNING!` Unable to save post to DB. Post was not posted!').catch((e: IncomingMessage) => dansole.error(e));\r\n            return dansole.error(err);\r\n        }\r\n\r\n        // [5] posting to channel\r\n        bot.sendPhoto(CHANNEL_ID, selectedPost.large_file_url, { caption: `${selectedPost.md5}.${selectedPost.file_ext}` }).then(() => {\r\n            // [6] sending report to owner\r\n            let info = ` \\n\r\n            ✅ Picture ${selectedPost.md5} was posted. \\n \r\n            📋 To collection: ${collectionName}. \\n\r\n            🔁 Cycles performed: ${postsRefreshedCounter}. \\n \r\n            Selected picture from last cycle is #${selectedPostIndex} \\n\r\n            🕓 Posted at: ${new Date().toUTCString()}`;\r\n\r\n            const preferences = danMemory.getAll();\r\n\r\n            if (Object.keys(preferences).length) {\r\n                info = info.concat(` \\n\\n⚙ With preferences: ${JSON.stringify(preferences)} and increased limit to ${LIMIT_FOR_TAGS}`);\r\n            }\r\n\r\n            bot.sendMessage(\r\n                chatId, info\r\n            ).catch((e: IncomingMessage) => dansole.error(e));\r\n        }).catch((e: IncomingMessage) => {\r\n            dansole.error(e);\r\n\r\n            bot.sendMessage(\r\n                chatId, `22\r\n                ❌ Picture ${selectedPost.md5} was NOT posted. \\n \r\n                📋 To collection: ${collectionName}. \\n\r\n                🔁 Cycles performed: ${postsRefreshedCounter}. \\n \r\n                Selected picture from last cycle is #${selectedPostIndex} \\n\r\n                🕓 Error happened at: ${new Date().toUTCString()} \\n\\n\r\n                REASON: ${e} \\n\\n\r\n                \r\n                LOG: ${JSON.stringify(selectedPost)}`\r\n            ).catch((e: IncomingMessage) => dansole.error(e));\r\n        });\r\n    });\r\n}\r\n\r\n/**\r\n * sets a setting value\r\n */\r\nfunction c_set(msg: ITelegramMessage) {\r\n    const chatId = msg.chat.id;\r\n\r\n    const parameters = danUtils.parseCommand(msg.text).parameters;\r\n\r\n    if (parameters['_'].length) {\r\n        bot.sendMessage(chatId, `Can't perceive this parameters: ${parameters['_'].join(', ')}`);\r\n        c_help(msg);\r\n        return;\r\n    }\r\n\r\n    delete parameters['_'];\r\n\r\n    for (const key in parameters) {\r\n        if (parameters.hasOwnProperty(key) && danMemory.allowedParams.find(name => name === key)) {\r\n            danMemory.set({[key]: parameters[key]});\r\n        } else {\r\n            bot.sendMessage(chatId, `${key} parameter not allowed`);\r\n            c_help(msg);\r\n        }\r\n    }\r\n\r\n    bot.sendMessage(chatId, `Dan preference now: ${JSON.stringify(danMemory.getAll())}`);\r\n}\r\n\r\n/**\r\n * prints help\r\n */\r\nfunction c_help(msg: ITelegramMessage) {\r\n    bot.sendMessage(msg.chat.id, `\r\n        Available commands:\r\n            /start - shows keyboard, starts bot\r\n            /hello - prints message\r\n            /pic - gets random picture\r\n            /post - posts picture to channel based on preferences\r\n            /set - sets preference\r\n                --rating - saves selected rating ['explicit' | 'safe' | 'questionable']; ex: /set --rating=safe\r\n                --order - saves selected order ['rank' | 'custom' | 'comment_bumped']; ex: /set --order=rank\r\n                --frequency - how often post will be posted automatically (in hours);  ex: /set --frequency=1\r\n    `);\r\n}\r\n\r\n\r\nsetCommand('set', (msg: ITelegramMessage) => {\r\n    c_set(msg)\r\n}, true);\r\nsetCommand('help', (msg: ITelegramMessage) => {\r\n    c_help(msg)\r\n});\r\nsetCommand('post', (msg: ITelegramMessage) => {\r\n    c_post(msg);\r\n});\r\nsetCommand('pic', (msg: ITelegramMessage) => {\r\n    c_pic(msg);\r\n});\r\nsetCommand('link', (msg: ITelegramMessage) => {\r\n    c_link(msg);\r\n});\r\nsetCommand('hello', (msg: ITelegramMessage) => {\r\n    c_hello(msg);\r\n});\r\nsetCommand('info', (msg: ITelegramMessage) => {\r\n    c_info(msg);\r\n});\r\nsetCommand('start', (msg: ITelegramMessage) => {\r\n    c_start(msg);\r\n});\r\n\r\nmodule.exports = {\r\n    c_help,\r\n    c_start,\r\n    c_link,\r\n    c_info,\r\n    c_hello,\r\n    c_pic,\r\n    c_post,\r\n    c_set,\r\n};\r\n","const mongoose = require('mongoose');\r\n\r\nconst MongoSavedPost = new mongoose.Schema({\r\n    md5: String,\r\n    url: String,\r\n    added_at: String,\r\n    tags: String,\r\n    artists: String\r\n});\r\n\r\nexport const MPost = MongoSavedPost;\r\n","import {IDanPost, IDanPostError, TDanOrder, TDanRatings} from \"../models/danbooru\";\r\nimport {ClientRequest, IncomingMessage} from \"http\";\r\nimport {DanConsole} from \"./__utils\";\r\nimport {LIMIT_FOR_TAGS} from \"../models/constants\";\r\nimport { Dirent } from \"fs\";\r\nimport { Http2ServerResponse } from \"http2\";\r\nconst dansole = new DanConsole(true);\r\n\r\nconsole.log('[DAN] >> Starting booru.js ...');\r\n\r\nconst Danbooru = require('danbooru');\r\nconst https = require('https');\r\nconst fs = require('fs');\r\n\r\n// Perform a search for popular image posts\r\nconst booru = new Danbooru();\r\n\r\nfunction TEST(do_save: boolean = false): void {\r\n  booru.posts({tags: 'rating:safe order:rank'}).then((posts: Array<IDanPost>) => {\r\n    // Select a random post from posts array\r\n    const index = Math.floor(Math.random() * posts.length);\r\n    const post = posts[index];\r\n\r\n    console.log('Link: ', post.large_file_url);\r\n\r\n    if (do_save){\r\n      saveFile([post]);\r\n    }\r\n  });\r\n}\r\n\r\nfunction getPostsInfo(params?: {\r\n  rating?: TDanRatings,\r\n  order?: TDanOrder\r\n}): Array<IDanPost> {\r\n  let postParams;\r\n  if (params) {\r\n    let paramsArray: Array<string> = [];\r\n\r\n    for (let paramsKey in params) {\r\n      paramsArray.push(`${paramsKey}:${params[paramsKey as 'rating' | 'order']}`);\r\n    }\r\n\r\n    postParams = {tags: paramsArray.join(' '), limit: LIMIT_FOR_TAGS};\r\n    dansole.info(`Parameters for searching: `);\r\n    console.dir(postParams);\r\n  } else {\r\n    dansole.warn(`[DAN] >> @getFile(): getting random picture ...`)\r\n  }\r\n\r\n  return booru.posts(postParams).then((res: Array<IDanPost>) => {\r\n\r\n    // sometimes res can be as Error: IDanPostError. If so must throw exception\r\n    if ((res as unknown as IDanPostError).success === false) {\r\n      dansole.error(`[DAN] >> Error @getFile(): ${(res as unknown as IDanPostError).message}`);\r\n      return;\r\n    }\r\n    return res;\r\n  });\r\n}\r\n\r\nfunction getPostsFileStream(posts: Array<IDanPost>): Array<ClientRequest> {\r\n  return posts.map(post => {\r\n    // Get post's url and create a filename for it\r\n    const url = booru.url(post.file_url);\r\n    // Download post image using node's https and fs libraries\r\n    return https.get(url).on('error', (err: IncomingMessage) => { console.log(err) });\r\n  })\r\n}\r\n\r\n/**\r\n * Saves file to ./saves.\r\n * @param {Array<IDanPost>} posts array of posts.\r\n */\r\nfunction saveFile(posts: Array<IDanPost>): void {\r\n  const dir = './saves';\r\n  const files: Array<string | Buffer | Dirent> = fs.readdirSync(dir);\r\n  const filesCount = ++files.length;\r\n\r\n  if (posts && Array.isArray(posts)) {\r\n    posts.forEach(post => {\r\n      const fileName = `${post.md5}.${post.file_ext}`;\r\n      const existing = files.filter(file => file === fileName);\r\n\r\n      if (existing.length) {\r\n        console.warn(`[DAN] >> File \"${fileName}\" already exists! Rewriting.`);\r\n      }\r\n\r\n      console.log(`[DAN] >> Saving file #${filesCount} - \"${fileName}\" ...`);\r\n\r\n      // Get post's url and create a filename for it\r\n      const url = booru.url(post.file_url);\r\n\r\n      // Download post image using node's https and fs libraries\r\n      https.get(url, (response: Http2ServerResponse) => {\r\n        response.pipe(fs.createWriteStream(`${dir}/${fileName}`));\r\n        console.log('The file has been saved!');\r\n      })\r\n    })\r\n  }\r\n}\r\n\r\n\r\n// EXECUTION\r\n\r\nconsole.log('[DAN] >> main() execution...', '\\n\\n\\n');\r\n(async function main () {\r\n\r\n  // TEST();\r\n\r\n  // let postsInfo: Array<IDanPost> = await getPostsInfo({rating: \"explicit\", order: \"rank\"});\r\n\r\n  // console.log(\"GET INFO res: \\n\\n\", postsInfo.length, postsInfo.map(postInfoObj => postInfoObj.file_url));\r\n\r\n  // getPostsFileStream(postsInfo);\r\n\r\n  // console.log(\"GET STREAM res: \\n\\n\", postsStream.length, postsStream.map((postStream, i) => {\r\n  //   return `Stream #${i} is writable: ${postStream.writable}`;\r\n  // }));\r\n\r\n})();\r\n\r\nexport {getPostsInfo, getPostsFileStream, saveFile};\r\n","module.exports = require(\"danbooru\");","module.exports = require(\"https\");","module.exports = require(\"fs\");"],"sourceRoot":""}